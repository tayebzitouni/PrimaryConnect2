// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrimaryConnect.Data;

#nullable disable

namespace PrimaryConnect.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250420072449_nine.14")]
    partial class nine14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("PrimaryConnect.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsJustified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("absences");
                });

            modelBuilder.Entity("PrimaryConnect.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("chatMessages");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Class", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeworkPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dsecription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("personid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("personid");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("All")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Event_Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("events_Students");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AssignedToAll")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("homeworks");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Marks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarque")
                        .HasColumnType("TEXT");

                    b.Property<int>("Semestre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<int>("mark")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("PrimaryConnect.Models.NotificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendToAll")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetClasses")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetRoles")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIds")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PrimaryConnect.Models.RequestDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryMethode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dsecription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentOrTeacher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("personid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("personid");

                    b.ToTable("requests");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherRemark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("PrimaryConnect.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Degree")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher_Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Assignementdate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherClasses");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher_Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teacher_Students");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Administrator", b =>
                {
                    b.HasBaseType("PrimaryConnect.Models.Person");

                    b.Property<int>("Permitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SchoolId");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("PrimaryConnect.Models.Parent", b =>
                {
                    b.HasBaseType("PrimaryConnect.Models.Person");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher", b =>
                {
                    b.HasBaseType("PrimaryConnect.Models.Person");

                    b.Property<int?>("Classid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("Classid");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("PrimaryConnect.Models.Absence", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Student", "student")
                        .WithMany("absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");
                });

            modelBuilder.Entity("PrimaryConnect.Models.ChatMessage", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Person", "person")
                        .WithMany("chatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Class", b =>
                {
                    b.HasOne("PrimaryConnect.Models.School", "school")
                        .WithMany("classs")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("school");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Courses", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Student", "student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("student");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Document", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Event_Student", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Event", "Event")
                        .WithMany("envent_student")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Student", "student")
                        .WithMany("envent_student")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("student");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Marks", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Student", "student")
                        .WithMany("marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Subject", "subject")
                        .WithMany("marks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("PrimaryConnect.Models.RequestDocument", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Parent", null)
                        .WithMany("requests")
                        .HasForeignKey("ParentId");

                    b.HasOne("PrimaryConnect.Models.Teacher", null)
                        .WithMany("requests")
                        .HasForeignKey("TeacherId");

                    b.HasOne("PrimaryConnect.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Student", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Class", "myclass")
                        .WithMany("students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Parent", "parent")
                        .WithMany("students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.School", "school")
                        .WithMany("students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("myclass");

                    b.Navigation("parent");

                    b.Navigation("school");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher_Class", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Class", "Class")
                        .WithMany("teacher_Classes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Teacher", "Teacher")
                        .WithMany("Teacher_class")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher_Student", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Student", "student")
                        .WithMany("Teachers_students")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Teacher", "Teacher")
                        .WithMany("Teachers_students")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("student");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Administrator", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("PrimaryConnect.Models.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.School", "School")
                        .WithMany("administrators")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Parent", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("PrimaryConnect.Models.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.Parent", null)
                        .WithMany("parents")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher", b =>
                {
                    b.HasOne("PrimaryConnect.Models.Class", null)
                        .WithMany("teachers")
                        .HasForeignKey("Classid");

                    b.HasOne("PrimaryConnect.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("PrimaryConnect.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimaryConnect.Models.School", "School")
                        .WithMany("teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Class", b =>
                {
                    b.Navigation("students");

                    b.Navigation("teacher_Classes");

                    b.Navigation("teachers");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Event", b =>
                {
                    b.Navigation("envent_student");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Person", b =>
                {
                    b.Navigation("chatMessages");
                });

            modelBuilder.Entity("PrimaryConnect.Models.School", b =>
                {
                    b.Navigation("administrators");

                    b.Navigation("classs");

                    b.Navigation("students");

                    b.Navigation("teachers");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Student", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Teachers_students");

                    b.Navigation("absences");

                    b.Navigation("envent_student");

                    b.Navigation("marks");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Subject", b =>
                {
                    b.Navigation("marks");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Parent", b =>
                {
                    b.Navigation("parents");

                    b.Navigation("requests");

                    b.Navigation("students");
                });

            modelBuilder.Entity("PrimaryConnect.Models.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Teacher_class");

                    b.Navigation("Teachers_students");

                    b.Navigation("requests");
                });
#pragma warning restore 612, 618
        }
    }
}
